#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.5
# In conjunction with Tcl version 8.6
# Apr 20, 2015 09:45:50 PM

from tkinter import *
from tkinter.ttk import *

from gui import mainwindow_support


w = None


def create_pvelauncher(root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    w.title('PveLauncher')
    geom = "259x185+496+300"
    w.geometry(geom)
    w_win = PveLauncher(w)
    mainwindow_support.init(w, w_win, param)
    return w_win


def destroy_pvelauncher():
    global w
    w.destroy()
    w = None


class PveLauncher:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        self.style = Style()
        if sys.platform == "win32":
            if 'vista' in self.style.theme_names():
                self.style.theme_use('vista')
            else:
                self.style.theme_use('winnative')

        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[('selected', _compcolor), ('active', _ana2color)])
        master.configure(background="#d9d9d9")

        self.lbl_server_status = Label(master, text="")
        self.lbl_server_status.place(relx=0.69, rely=0.0, height=25, width=76)

        self.btn_launch = Button(master)
        self.btn_launch.place(relx=0.69, rely=0.22, height=25, width=76)
        self.btn_launch.configure(command=mainwindow_support.gui_login)
        self.btn_launch.configure(takefocus="")
        self.btn_launch.configure(text='''Launch''')

        self.btn_edit = Button(master)
        self.btn_edit.place(relx=0.69, rely=0.38, height=25, width=76)
        self.btn_edit.configure(command=mainwindow_support.gui_edit)
        self.btn_edit.configure(takefocus="")
        self.btn_edit.configure(text='''Edit''')

        self.btn_add = Button(master)
        self.btn_add.place(relx=0.69, rely=0.54, height=25, width=76)
        self.btn_add.configure(command=mainwindow_support.gui_add)
        self.btn_add.configure(takefocus="")
        self.btn_add.configure(text='''Add''')

        self.btn_delete = Button(master)
        self.btn_delete.place(relx=0.69, rely=0.70, height=25, width=76)
        self.btn_delete.configure(command=mainwindow_support.gui_delete)
        self.btn_delete.configure(takefocus="")
        self.btn_delete.configure(text='''Delete''')

        self.btn_clear_cache = Button(master)
        self.btn_clear_cache.place(relx=0.69, rely=0.86, height=25, width=76)
        self.btn_clear_cache.configure(command=mainwindow_support.gui_clear_cache)
        self.btn_clear_cache.configure(takefocus="")
        self.btn_clear_cache.configure(text='''Clear Cache''')

        self.acc_list = ScrolledListBox(master)
        self.acc_list.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=0.67)
        self.acc_list.configure(background="white")
        self.acc_list.configure(disabledforeground="#a3a3a3")
        self.acc_list.configure(font="TkFixedFont")
        self.acc_list.configure(foreground="black")
        self.acc_list.configure(highlightbackground="#d9d9d9")
        self.acc_list.configure(highlightcolor="#d9d9d9")
        self.acc_list.configure(selectbackground="#c4c4c4")
        self.acc_list.configure(selectforeground="black")
        self.acc_list.configure(width=10)

    def set_server_status(self, status_string):
        self.lbl_server_status.config(text=status_string)


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        # Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = Scrollbar(master, orient='horizontal', command=self.xview)

        #  self.configure(yscrollcommand=self._autoscroll(vsb),
        #  xscrollcommand=self._autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = Pack.__dict__.keys() | Grid.__dict__.keys() | Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = Frame(master)
        return func(cls, container, **kw)

    return wrapped


class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
